/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.nixos.idea.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import it.unimi.dsi.fastutil.ints.AbstractIntList;
import it.unimi.dsi.fastutil.ints.IntArrayList;

import static org.nixos.idea.psi.NixTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/nico/dev/nixos/nix-idea/src/main/lang/Nix.flex</tt>
 */
class _NixLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK = 2;
  public static final int STRING = 4;
  public static final int IND_STRING = 6;
  public static final int ANTIQUOTATION_START = 8;
  public static final int ANTIQUOTATION = 10;
  public static final int PATH = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\20\1\22\2\0\1\22\22\0\1\20\1\57\1\24\1\21\1\25\1\17\1\60\1\2\1\52"+
    "\1\53\1\23\1\7\1\50\1\10\1\5\1\11\1\3\11\4\1\16\1\47\1\13\1\46\1\14\1\56\1"+
    "\51\4\15\1\6\25\15\1\54\1\26\1\55\1\0\1\1\1\0\1\41\1\15\1\44\1\15\1\35\1\32"+
    "\1\15\1\34\1\31\2\15\1\37\1\15\1\36\1\45\2\15\1\42\1\40\1\33\2\15\1\43\3\15"+
    "\1\27\1\61\1\30\1\12\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\2\3\1\4\1\2\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\1\1\17\1\20\10\2\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\1\1\33\1\34\1\35\2\34\3\36\1\37\1\40"+
    "\1\41\2\42\1\41\1\2\1\0\1\43\1\44\1\3"+
    "\1\0\1\45\3\0\1\46\1\47\1\43\1\50\2\0"+
    "\1\43\1\0\1\51\1\52\1\53\1\54\1\55\6\2"+
    "\1\56\1\57\1\60\1\61\1\62\1\34\1\63\1\64"+
    "\1\65\1\36\1\0\1\66\1\67\1\0\1\70\1\0"+
    "\1\71\3\2\1\72\1\2\1\73\1\2\1\74\1\0"+
    "\1\45\1\0\1\75\1\2\1\76\1\77\1\2\1\100"+
    "\3\2\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u015e\0\u03e8\0\u041a\0\u015e"+
    "\0\u015e\0\u044c\0\u015e\0\u015e\0\u047e\0\u04b0\0\u04e2\0\u0514"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u0640\0\u0672\0\u06a4"+
    "\0\u015e\0\u06d6\0\u015e\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u015e\0\u015e\0\u015e\0\u0802\0\u015e\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u015e\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0898\0\u015e\0\u0a28\0\u015e\0\u0a5a\0\u0a8c\0\u015e\0\u0abe"+
    "\0\u015e\0\u015e\0\u015e\0\u028a\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u028a\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u0c4e\0\u015e\0\u0c80\0\u0898\0\u09f6"+
    "\0\u0cb2\0\u015e\0\u0ce4\0\u015e\0\u0d16\0\u0d48\0\u0d7a\0\u028a"+
    "\0\u0dac\0\u028a\0\u0dde\0\u015e\0\u0e10\0\u0e42\0\u0e42\0\u015e"+
    "\0\u0e74\0\u028a\0\u028a\0\u0ea6\0\u028a\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u028a\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\16\1\25\1\10"+
    "\1\26\1\27\1\26\1\30\1\31\1\32\1\10\1\33"+
    "\1\34\1\35\1\16\1\36\1\16\1\37\1\16\1\40"+
    "\1\16\1\41\1\42\1\43\1\16\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\16"+
    "\1\25\1\10\1\26\1\27\1\26\1\30\1\31\1\32"+
    "\1\10\1\33\1\61\1\35\1\16\1\36\1\16\1\37"+
    "\1\16\1\40\1\16\1\41\1\42\1\43\1\16\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\24\62\1\63\1\64\1\65"+
    "\33\62\2\66\1\67\22\66\1\70\34\66\27\10\1\71"+
    "\33\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\16\1\25\1\10"+
    "\1\26\1\27\1\26\1\30\1\31\1\32\1\10\1\33"+
    "\1\72\1\35\1\16\1\36\1\16\1\37\1\16\1\40"+
    "\1\16\1\41\1\42\1\43\1\16\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\73\1\74\1\73\6\74\1\75\3\73"+
    "\1\74\7\73\1\76\3\73\15\74\14\73\63\0\1\11"+
    "\1\77\2\11\1\100\1\11\1\100\1\11\1\101\3\0"+
    "\1\11\13\0\15\11\16\0\1\102\60\0\1\100\1\0"+
    "\2\103\1\104\3\100\1\101\3\0\1\100\13\0\15\100"+
    "\15\0\1\100\1\0\2\14\1\105\3\100\1\101\3\0"+
    "\1\100\13\0\15\100\15\0\1\100\1\0\2\105\1\106"+
    "\3\100\1\101\3\0\1\100\13\0\15\100\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\15\16\15\0\1\100\1\0\4\100"+
    "\1\111\1\100\1\101\3\0\1\100\13\0\15\100\15\0"+
    "\1\100\1\0\6\100\1\101\2\0\1\112\1\100\13\0"+
    "\15\100\15\0\1\113\1\0\6\113\1\114\3\0\1\113"+
    "\5\0\1\115\1\0\1\116\3\0\15\113\25\0\1\117"+
    "\51\0\1\120\1\0\6\120\4\0\1\120\13\0\15\120"+
    "\1\121\61\0\1\122\33\0\1\26\1\0\1\26\37\0"+
    "\22\27\1\0\37\27\27\0\1\123\33\0\1\11\1\77"+
    "\2\16\1\107\1\16\1\107\1\16\1\101\3\0\1\16"+
    "\1\110\12\0\1\16\1\124\3\16\1\125\7\16\15\0"+
    "\1\11\1\77\2\16\1\107\1\16\1\107\1\16\1\101"+
    "\3\0\1\16\1\110\12\0\3\16\1\126\11\16\15\0"+
    "\1\11\1\77\2\16\1\107\1\16\1\107\1\16\1\101"+
    "\3\0\1\16\1\110\12\0\6\16\1\127\6\16\15\0"+
    "\1\11\1\77\2\16\1\107\1\16\1\107\1\16\1\101"+
    "\3\0\1\16\1\110\12\0\4\16\1\130\10\16\15\0"+
    "\1\11\1\77\2\16\1\107\1\16\1\107\1\16\1\101"+
    "\3\0\1\16\1\110\12\0\7\16\1\131\5\16\15\0"+
    "\1\11\1\77\2\16\1\107\1\16\1\107\1\16\1\101"+
    "\3\0\1\16\1\110\12\0\4\16\1\132\10\16\15\0"+
    "\1\11\1\77\2\16\1\107\1\16\1\107\1\16\1\101"+
    "\3\0\1\16\1\110\12\0\1\133\14\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\11\16\1\134\3\16\62\0\1\135"+
    "\61\0\1\136\73\0\1\137\62\0\1\140\24\62\3\0"+
    "\33\62\25\0\1\141\1\0\1\142\32\0\62\143\2\66"+
    "\1\0\22\66\1\0\34\66\2\0\1\144\104\0\1\145"+
    "\1\0\1\142\33\0\1\74\1\0\6\74\1\75\3\0"+
    "\1\74\13\0\15\74\43\0\1\142\33\0\4\77\1\0"+
    "\1\77\1\0\1\77\4\0\1\77\13\0\15\77\15\0"+
    "\1\100\1\0\6\100\1\101\3\0\1\100\13\0\15\100"+
    "\15\0\1\113\1\0\6\113\4\0\1\113\13\0\15\113"+
    "\15\0\1\100\1\0\2\103\4\100\1\101\3\0\1\100"+
    "\13\0\15\100\15\0\1\100\1\0\2\105\4\100\1\101"+
    "\3\0\1\100\13\0\15\100\15\0\1\100\1\0\2\105"+
    "\1\100\1\146\2\100\1\101\3\0\1\100\13\0\4\100"+
    "\1\146\10\100\15\0\1\100\1\0\2\100\1\147\3\100"+
    "\1\101\3\0\1\100\13\0\15\100\15\0\1\100\1\0"+
    "\6\107\1\101\3\0\1\107\1\110\12\0\15\107\15\0"+
    "\12\150\2\0\3\150\3\0\1\150\1\0\1\150\3\0"+
    "\16\150\1\0\2\150\4\0\3\150\2\0\1\113\1\0"+
    "\6\113\1\101\3\0\1\113\13\0\15\113\14\0\23\115"+
    "\1\151\36\115\27\0\1\152\33\0\1\120\1\0\6\120"+
    "\1\153\2\0\1\154\1\120\13\0\15\120\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\3\16\1\155\11\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\4\16\1\156\10\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\7\16\1\157\5\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\2\16\1\160\12\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\7\16\1\161\5\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\13\16\1\162\1\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\2\16\1\163\12\16\16\0\1\164"+
    "\22\0\1\164\1\165\34\0\1\100\1\0\2\166\2\100"+
    "\2\167\1\101\3\0\1\100\13\0\15\100\14\0\11\115"+
    "\1\170\50\115\1\0\1\120\1\0\6\120\4\0\1\120"+
    "\13\0\15\120\15\0\1\11\1\77\2\16\1\107\1\16"+
    "\1\107\1\16\1\101\3\0\1\16\1\110\12\0\4\16"+
    "\1\171\10\16\15\0\1\11\1\77\2\16\1\107\1\16"+
    "\1\107\1\16\1\101\3\0\1\16\1\110\12\0\5\16"+
    "\1\172\7\16\15\0\1\11\1\77\2\16\1\107\1\16"+
    "\1\107\1\16\1\101\3\0\1\16\1\110\12\0\4\16"+
    "\1\173\10\16\15\0\1\11\1\77\2\16\1\107\1\16"+
    "\1\107\1\16\1\101\3\0\1\16\1\110\12\0\4\16"+
    "\1\174\10\16\15\0\1\11\1\77\2\16\1\107\1\16"+
    "\1\107\1\16\1\101\3\0\1\16\1\110\12\0\3\16"+
    "\1\175\11\16\14\0\62\164\1\0\1\100\1\0\2\166"+
    "\4\100\1\101\3\0\1\100\13\0\15\100\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\11\16\1\176\3\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\11\16\1\177\3\16\15\0\1\11"+
    "\1\77\2\16\1\107\1\16\1\107\1\16\1\101\3\0"+
    "\1\16\1\110\12\0\1\200\14\16\15\0\1\11\1\77"+
    "\2\16\1\107\1\16\1\107\1\16\1\101\3\0\1\16"+
    "\1\110\12\0\2\16\1\201\12\16\15\0\1\11\1\77"+
    "\2\16\1\107\1\16\1\107\1\16\1\101\3\0\1\16"+
    "\1\110\12\0\2\16\1\202\12\16\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\14\1\1\11\2\1\2\11\1\1\2\11"+
    "\11\1\10\11\3\1\1\11\1\1\1\11\5\1\3\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\3\0\1\1\1\11\1\1\1\11\2\0\1\11"+
    "\1\0\3\11\11\1\7\11\1\1\1\11\1\0\2\1"+
    "\1\0\1\11\1\0\1\11\7\1\1\11\1\0\1\1"+
    "\1\0\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final AbstractIntList states = new IntArrayList();

  private void pushState(int newState) {
      if (newState == YYINITIAL){
          throw new IllegalStateException("Pusing YYINITIAL is not supported");
      }
      // store current state on the stack to allow restoring it in popState(...)
      states.push(yystate());
      yybegin(newState);
  }

  private void popState(int expectedState) {
    if (states.isEmpty()){
      throw new IllegalStateException("Popping an empty stack of states. Expected: " + expectedState);
    }
    // safe-guard, because we always know which state we're currently in in the rules below
    if (yystate() != expectedState) {
        throw new IllegalStateException(String.format("Unexpected state. Current: %d, expected: %d", yystate(), expectedState));
    }
    // start the lexer with the previous state, which was stored by pushState(...)
    yybegin(states.popInt());
  }

  protected void onReset() {
      states.clear();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _NixLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { return ID;
            } 
            // fall through
          case 68: break;
          case 3: 
            { return INT;
            } 
            // fall through
          case 69: break;
          case 4: 
            { return DOT;
            } 
            // fall through
          case 70: break;
          case 5: 
            { return PLUS;
            } 
            // fall through
          case 71: break;
          case 6: 
            { return MINUS;
            } 
            // fall through
          case 72: break;
          case 7: 
            { return DIVIDE;
            } 
            // fall through
          case 73: break;
          case 8: 
            { return LT;
            } 
            // fall through
          case 74: break;
          case 9: 
            { return GT;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return COLON;
            } 
            // fall through
          case 76: break;
          case 11: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return SCOMMENT;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return TIMES;
            } 
            // fall through
          case 79: break;
          case 14: 
            { pushState(STRING); return STRING_OPEN;
            } 
            // fall through
          case 80: break;
          case 15: 
            { pushState(BLOCK); return LCURLY;
            } 
            // fall through
          case 81: break;
          case 16: 
            { return RCURLY;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return ASSIGN;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return SEMI;
            } 
            // fall through
          case 84: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 85: break;
          case 20: 
            { return AT;
            } 
            // fall through
          case 86: break;
          case 21: 
            { return LPAREN;
            } 
            // fall through
          case 87: break;
          case 22: 
            { return RPAREN;
            } 
            // fall through
          case 88: break;
          case 23: 
            { return LBRAC;
            } 
            // fall through
          case 89: break;
          case 24: 
            { return RBRAC;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return HAS;
            } 
            // fall through
          case 91: break;
          case 26: 
            { return NOT;
            } 
            // fall through
          case 92: break;
          case 27: 
            { popState(BLOCK); return RCURLY;
            } 
            // fall through
          case 93: break;
          case 28: 
            { return STR;
            } 
            // fall through
          case 94: break;
          case 29: 
            { popState(STRING); return STRING_CLOSE;
            } 
            // fall through
          case 95: break;
          case 30: 
            { return IND_STR;
            } 
            // fall through
          case 96: break;
          case 31: 
            { popState(ANTIQUOTATION_START); pushState(ANTIQUOTATION); return LCURLY;
            } 
            // fall through
          case 97: break;
          case 32: 
            { popState(ANTIQUOTATION); return RCURLY;
            } 
            // fall through
          case 98: break;
          case 33: 
            { popState(PATH); yypushback(yylength()); return PATH_END;
            } 
            // fall through
          case 99: break;
          case 34: 
            { return PATH_SEGMENT;
            } 
            // fall through
          case 100: break;
          case 35: 
            { pushState(PATH); return PATH_SEGMENT;
            } 
            // fall through
          case 101: break;
          case 36: 
            { pushState(IND_STRING); return IND_STRING_OPEN;
            } 
            // fall through
          case 102: break;
          case 37: 
            { return FLOAT;
            } 
            // fall through
          case 103: break;
          case 38: 
            { return CONCAT;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return IMPL;
            } 
            // fall through
          case 105: break;
          case 40: 
            { return UPDATE;
            } 
            // fall through
          case 106: break;
          case 41: 
            { return LEQ;
            } 
            // fall through
          case 107: break;
          case 42: 
            { return GEQ;
            } 
            // fall through
          case 108: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return DOLLAR;
            } 
            // fall through
          case 109: break;
          case 44: 
            { return IF;
            } 
            // fall through
          case 110: break;
          case 45: 
            { return IN;
            } 
            // fall through
          case 111: break;
          case 46: 
            { return OR_KW;
            } 
            // fall through
          case 112: break;
          case 47: 
            { return EQ;
            } 
            // fall through
          case 113: break;
          case 48: 
            { return NEQ;
            } 
            // fall through
          case 114: break;
          case 49: 
            { return AND;
            } 
            // fall through
          case 115: break;
          case 50: 
            { return OR;
            } 
            // fall through
          case 116: break;
          case 51: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { pushState(ANTIQUOTATION_START); return DOLLAR;
            } 
            // fall through
          case 117: break;
          case 52: 
            { return STR_ESCAPE;
            } 
            // fall through
          case 118: break;
          case 53: 
            { popState(IND_STRING); return IND_STRING_CLOSE;
            } 
            // fall through
          case 119: break;
          case 54: 
            { return ELLIPSIS;
            } 
            // fall through
          case 120: break;
          case 55: 
            { return URI;
            } 
            // fall through
          case 121: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { pushState(PATH); return PATH_SEGMENT;
            } 
            // fall through
          case 122: break;
          case 57: 
            { return SPATH;
            } 
            // fall through
          case 123: break;
          case 58: 
            { return LET;
            } 
            // fall through
          case 124: break;
          case 59: 
            { return REC;
            } 
            // fall through
          case 125: break;
          case 60: 
            { return IND_STR_ESCAPE;
            } 
            // fall through
          case 126: break;
          case 61: 
            { return MCOMMENT;
            } 
            // fall through
          case 127: break;
          case 62: 
            { return THEN;
            } 
            // fall through
          case 128: break;
          case 63: 
            { return ELSE;
            } 
            // fall through
          case 129: break;
          case 64: 
            { return WITH;
            } 
            // fall through
          case 130: break;
          case 65: 
            { return ASSERT;
            } 
            // fall through
          case 131: break;
          case 66: 
            { return INHERIT;
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
